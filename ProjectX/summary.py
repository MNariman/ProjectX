import numpy as np

#--COMMUNITY--
#Quality of communities
#Number of communities
#Size of the smallest community 
#Size of the largest community
#Size of the average community 

#--TIME--
#Time spent in core algorithm for community detection from Adjacency matrix
#Time spent in performance evaluation

#--PERFORMANCE--
#Success rate/ only if the test dataset is generated by "BENCHMARK GN"

def print_time_core_algo(t_start_algo,t_end_algo):
	print "Time Elapsed-Core Algorithm: %.4f minutes."  % ((t_end_algo-t_start_algo)/60.0)

def print_time_performance(t_start_perf,t_end_perf):
	print "Time Elapsed-Performance Evaluation: %.4f minutes."  % ((t_end_perf-t_start_perf)/60.0)

def print_Q_factor(Q):
	print "Quality Factor: %.4f" %Q

def print_community_number(community_pool):
	print "Total Number of Communities: %d" % len(community_pool)

def print_community_stat(community_pool):
	size_array=[]
	for community in community_pool:
		size=len(community.members)
		size_array.append(size)
	sorted_array=sorted(size_array)

	print "Size of the Smallest Community: %d" %sorted_array[0]
	print "Size of the Largest Community: %d" %sorted_array[-1]
	print "Size of the Average Community: %d" %( sum(sorted_array)/len(sorted_array) )

def data_characteristics(A):
	total_node=len(A)
	total_edge=np.sum(A)/2
	average_degree=2*total_edge/total_node # is integer
	print "\n"
	print "---Data Characteristics---"
	print "--------------------------"
	print "Total Node Number:",total_node
	print "Total Edge Number:",total_edge
	print "Average Degree per Node:",average_degree
	print "----------END-------------"


def dir_data_characteristics(dir_A):

	node_number=len(dir_A)
	edge_number=np.sum(dir_A)
	average_degree=edge_number/node_number
	min_out_degree=np.min(np.sum(dir_A, axis=1))
	max_out_degree=np.max(np.sum(dir_A, axis=1))
	min_in_degree=np.min(np.sum(dir_A, axis=0))
	max_in_degree=np.max(np.sum(dir_A, axis=0))

	print "\n---Data Characteristics---"
	print "Total Node Number:",node_number
	print "Total Edge Number:",edge_number
	print "Average Degree per Node:",average_degree
	print "Min Out Degree:",min_out_degree
	print "Max Out Degree:",max_out_degree
	print "Min In Degree:",min_in_degree
	print "Max In Degree: ",max_in_degree
	print "-------------END---------"


def print_statistics(t_start_algo,t_end_algo,t_start_perf,t_end_perf,Q,community_pool,performance_message):
	print "\n"
	print "---Community Statistics---"
	print "--------------------------"
	print_Q_factor(Q)
	print_community_number(community_pool)
	print_community_stat(community_pool)
	print "\n"
	print "---Time Statistics---"
	print "---------------------"
	print_time_core_algo(t_start_algo,t_end_algo)
	print_time_performance(t_start_perf,t_end_perf)
	print "\n"
	print "---Performance Evaluation---"
	print "----------------------------"
	print performance_message
	print "\n"
	print "---------"
	print "---END---"

def handle_data_characteristics_and_statistics(dir_A,A,JSON_CHOSEN,t_start_algo,t_end_algo,t_start_perf,t_end_perf,Q,community_pool,performance_message):

	if JSON_CHOSEN==False:
		data_characteristics(A)
	elif JSON_CHOSEN==True:
		dir_data_characteristics(dir_A)

	print_statistics(t_start_algo,t_end_algo,t_start_perf,t_end_perf,Q,community_pool,performance_message)